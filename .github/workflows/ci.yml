name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Main test and build job
  test-and-build:
    name: Test and Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [20, 21]
        package-manager: [yarn, npm]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: ${{ matrix.package-manager }}
        corepack: ${{ matrix.package-manager == 'yarn' }}

    - name: Setup Yarn
      run: corepack prepare yarn@4.6.0 --activate

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile

    - name: Setup development environment
      run: |
        yarn setup

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install rom-tools

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y mame-tools

    - name: Verify chdman installation
      run: |
        if ! command -v chdman &> /dev/null; then
          echo "❌ chdman is not installed or not in PATH"
          echo "Available commands:"
          which -a chdman || echo "chdman not found"
          echo "PATH: $PATH"
          exit 1
        else
          echo "✅ chdman is installed and available"
          chdman --version || echo "chdman version check failed"
        fi

    - name: Run linter
      run: |
        yarn lint

    - name: Check code formatting
      run: |
        yarn pretty:check

    - name: Check spelling
      run: |
        yarn spell:check

    - name: Run security audit
      run: |
        yarn audit:check

    - name: Run tests (excluding system-dependent tests)
      run: |
        yarn test --testPathIgnorePatterns="scripts/other/__tests__" --testPathIgnorePatterns="src/archive/rar.test.ts" --testPathIgnorePatterns="src/archive/seven-zip.test.ts" --testPathIgnorePatterns="src/utils/storage.test.ts"

    - name: Run tests with coverage (excluding system-dependent tests)
      run: |
        yarn test --coverage --testPathIgnorePatterns="scripts/other/__tests__" --testPathIgnorePatterns="src/archive/rar.test.ts" --testPathIgnorePatterns="src/archive/seven-zip.test.ts" --testPathIgnorePatterns="src/utils/storage.test.ts"

    - name: Build project
      run: |
        yarn build

    - name: Package project
      run: |
        yarn package

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}-${{ matrix.package-manager }}
        path: |
          dist/
        retention-days: 30

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package-manager: [yarn, npm]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: ${{ matrix.package-manager }}
        corepack: ${{ matrix.package-manager == 'yarn' }}

    - name: Setup Yarn (if using yarn)
      run: corepack prepare yarn@4.6.0 --activate

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile

    - name: Setup development environment
      run: |
        yarn setup

    - name: Run security audit
      run: |
        yarn audit

  # Type checking
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package-manager: [yarn, npm]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: ${{ matrix.package-manager }}
        corepack: ${{ matrix.package-manager == 'yarn' }}

    - name: Setup Yarn
      run: corepack prepare yarn@4.6.0 --activate

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile

    - name: Setup development environment
      run: |
        yarn setup

    - name: Type check
      run: |
        yarn tsc --noEmit
